import { malloc, realloc, strcmp, free, printf } from "<libc>"

namespace Object
{
	const AddProperty = (obj, name, value) => {
		obj[0] = (this, name) => {
			const props = this[2]
			let i = 0

			while (props[i] != 0)
			{
				if (strcmp(props[i], name) == 0)
				{
					return this+((i+3)*4)
				}
				i+=1
			}

		}

		obj[1] = (this, name, value) => {
			const props = (deref (this))[2]
			let i = 0

			while (props[i] != 0)
			{
				if (strcmp(props[i], name) == 0)
				{
					(deref (this))[i+3] = value
					return
				}
				i+=1
			}

			deref (this) = Object.AddProperty(deref (this), name, value)
		}

		alreadyprops = realloc(alreadyprops, (len+2)*4)

		if (alreadyprops == 0) { return 0 } // invalid ptr/object, propadd failed

		alreadyprops[len] = name
		alreadyprops[len+1] = 0

		obj[2] = alreadyprops // in case the ptr changed for some reason
		
		obj = realloc(obj, (len+4)*4)
		obj[len+3] = value

		return obj // in case ptr changed
	}

	const AddPropertySafe = (obj, name, value) => {
		if (Object.HasProperty(obj, name)) return obj

		return Object.AddProperty(obj, name, value)
	}

	const DeAllocate = (obj) => {
		free(obj[2])
		free(obj)
	}

	const GetProperty = (obj, name) => {
		return obj[0](name)
	}

	const SetProperty = (obj, name, value) => {
		if (Object.HasProperty(obj, name))
			return obj[1](name, value)
	}

	const SetOrAddProperty = (obj, name, value) => {
		return obj[1](name, value)
	}

	const GetPropertySafe = (obj, name, onsuccess, onfail) => {
		if (Object.HasProperty(obj, name))
		{
			return onsuccess(obj, Object.GetProperty(obj, name))
		}

		return onfail(obj)
	}

	const HasProperty = (obj, name) => {
		let i = 0
		const props = obj[2]

		while (props[i] != 0)
		{
			if (strcmp(props[i], name) == 0) { return 1 }
		}

		return 0
	}

	const Properties = (obj) => {
		return obj[2]
	}
}

export namespace { Object }