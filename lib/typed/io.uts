import { printf } from "<libc>"
import struct { TypedValue } from "typed/typed-value"
import namespace { Object } from "utils/obj"
import namespace { Types } from "typed/typed-value"


namespace Console
{
	const WriteRepr = (struct TypedValue val) => {
		const type = val.type
	
		if (type == Types.INT)
		{
			printf("%d", val.value)
			return
		}

		if (type == Types.STRING)
		{
			printf("'%s'", val.value) // I know that putting the single quotes aroung the string is a cheap implementation, but right now there is no standard string library
			return
		}

		if (type == Types.FLOAT)
		{
			printf("%f", val.value)
			return
		}

		if (type == Types.ARR)
		{
			// figure out if there is a way to do this
			printf("array @ 0x%p", val.value)
			return
		}

		if (type == Types.PTR)
		{
			printf("0x%p", val.value)
			return
		}

		if (type == Types.BOOL)
		{
			if (val.value) {
				printf("true")
				return
			}
			
			printf("false")
			return
		}

		if (type == Types.OBJECT)
		{
			if (Object.HasProperty(val.value, "__repr__")) {
				printf(val.value.__repr__())
				return
			}

			printf("Object @ 0x%p", val.value)
		}
	}

	const Write = (struct TypedValue val) => {
		const type = val.type
		
		if (type == Types.INT)
		{
			printf("%d", val.value)
			return
		}

		if (type == Types.STRING)
		{
			printf(val.value)
			return
		}

		if (type == Types.FLOAT)
		{
			printf("%f", val.value)
			return
		}

		if (type == Types.ARR)
		{
			// figure out if there is a way to do this
			printf("[...] @ 0x%p", val.value)
			return
		}

		if (type == Types.PTR)
		{
			printf("0x%p", val.value)
			return
		}

		if (type == Types.BOOL)
		{
			if (val.value) {
				printf("true")
				return
			}
			
			printf("false")
			return
		}

		if (type == Types.OBJECT)
		{
			if (Object.HasProperty(val.value, "__str__")) {
				printf(val.value.__str__())
				return
			}

			printf("Object {\n")

			const props = Object.Properties(val.value)
			let i = 0

			while (props[i] != 0)
			{
				printf("  %s: ", props[i])
				Console.WriteRepr(Object.GetProperty(val.value, props[i]))
				if (props[i+1] != 0) printf(",")
				i+=1
			}

			printf("\n}")

			return		
		}
	}

	const WriteLine = (val) => {
		Console.Write(val)
		printf("\n") // newline
	}

	const WriteLineRepr = (val) => {
		Console.WriteRepr(val)
		printf("\n") // newline
	}
}

export namespace { Console }